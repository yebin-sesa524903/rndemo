apply plugin: "com.android.application"
//apply plugin: 'com.sensorsdata.analytics.android'
//apply plugin: 'com.facebook.react'

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"]
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

 project.ext.react = [
     enableHermes: false,  // clean and rebuild if changing
 ]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */

//-    compileSdkVersion 'android-P'
//-    buildToolsVersion "28.0.0 rc1"

def enableProguardInReleaseBuilds = true

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);

android {
    compileSdkVersion = 29
    buildToolsVersion = "29.0.3"
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    android {
          lintOptions {
              checkReleaseBuilds false
              // Or, if you prefer, you can continue to check for errors in release builds,
              // but continue the build even when errors are found:
              abortOnError false
          }
      }
    repositories {
          flatDir {
              dirs 'libs' //this way we can find the .aar file in libs folder
          }
      }

      dexOptions {
          javaMaxHeapSize "4g"
      }


    defaultConfig {
        applicationId "com.energymost.rocking"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode "$ROCK_VERSIONCODE".toInteger()
        versionName "$ROCK_VERSION"
        flavorDimensions "versionCode"
        vectorDrawables.useSupportLibrary = true
        manifestPlaceholders = [ prodName:"EnergyHub" ]
        ndk {
            abiFilters "armeabi-v7a", "x86", "arm64-v8a",'x86_64'
        }
        multiDexEnabled true
        missingDimensionStrategy "RNN.reactNativeVersion", "reactNative63"
        missingDimensionStrategy 'react-native-camera', 'general'
        missingDimensionStrategy 'react-native-navigation', 'general'
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a",'x86_64'
        }
    }
    signingConfigs {
       release {
           storeFile file("my.keystore")
           storePassword "Eh@ssw0rd"
           keyAlias "SamuelAlias123"
           keyPassword "Eh@ssw0rd"
       }
   }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
            //multiDexEnabled true
        }
        debug {
            signingConfig signingConfigs.release
        }

    }

//     configurations.all {
//         resolutionStrategy {
//            force 'org.webkit:android-jsc:r241213'
//         }
//     }

    // applicationVariants are e.g. debug, release

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            def fileName=outputFileName.replace(".apk", "-" + defaultConfig.versionName + ".apk")
            outputFileName = fileName
        }
    }


    productFlavors {
        prod {
            applicationId "com.energymost.mobile.rockeh"
            manifestPlaceholders = [
              authoritiesName:"com.energymost.mobile.rockeh",
              prodName:"EnergyHub",
              oss_bucket:"$prod_oss_bucket",
              prod:"$prod_uri",
              host:"$host",
              codepushKey:"$prod_codepushKey",
              notificationKey:"$prod_notificationKey",
              notificationSecret:"$prod_notificationSecret",
              upgradeUri:"$prod_upgradeUri",
              taskCenterUri:"$prod_taskCenterUri",
              gaodeKey:"$prod_gaodeKey",
              gaodeSDKKey:"$prod_gaode_sdkkey",
              sensorsdataUri:"$prod_sensorsdata_uri",
              exchangeUri:"$prod_exchange_uri",
              buglyKey:"$prod_bugly_Key",
              privacyEntryUri:"$prod_privacyEntryUri",
              privacyMyUri:"$prod_privacyMyUri"]
        }


        internal {
            applicationId "com.energymost.mobile.rockeht"
            manifestPlaceholders = [
              authoritiesName:"com.energymost.mobile.rockeht",
              prodName:"EnergyHubTest",
              oss_bucket:"$oss_bucket",
              prod:"",
              host:"$host",
              codepushKey:"$codepushKey",
              notificationKey:"$notificationKey",
              notificationSecret:"$notificationSecret",
              upgradeUri:"$upgradeUri",
              taskCenterUri:"$prod_taskCenterUri",
              gaodeKey:"$gaodeKey",
              gaodeSDKKey:"$gaode_sdkkey",
              sensorsdataUri:"$sensorsdata_uri",
              exchangeUri:"$exchange_uri",
              buglyKey:"$bugly_Key",
              privacyEntryUri:"$privacyEntryUri",
              privacyMyUri:"$privacyMyUri"]
        }
    }
}

dependencies {
    compile fileTree(dir: "libs", include: ["*.jar"])
//     implementation ('io.socket:socket.io-client:1.0.1') {
//       // excluding org.json which is provided by Android
//       exclude group: 'org.json', module: 'json'
//     }
   // implementation 'org.webkit:android-jsc-cppruntime:+'
//     implementation (name:'alicloud-android-push-3.1.9', ext: 'aar')
    //implementation "me.leolin:ShortcutBadger:1.1.22@aar"
    implementation 'com.facebook.fresco:animated-gif:2.0.0'
    debugImplementation 'com.amitshekhar.android:debug-db:1.0.6'
    implementation 'com.android.support:multidex:1.0.3'
    implementation "com.android.support:appcompat-v7:23.0.1"
    implementation 'com.scottyab:rootbeer-lib:0.0.7'
    /*implementation "com.alibaba:fastjson:1.2.11"*/
    implementation "com.facebook.react:react-native:+"  // From node_modules
    //implementation project(':ReactAndroid')
    /*implementation "cn.finalteam:galleryfinal:1.4.8.7"*/
    /*implementation "com.aliyun.dpa:oss-android-sdk:2.2.0"*/
    implementation 'com.gyf.cactus:cactus:1.1.3-beta13'
//     implementation 'io.socket:socket.io-client:1.0.1'
//     implementation 'com.sensorsdata.analytics.android:SensorsAnalyticsSDK:6.0.0'
//     implementation (project(':sensorsdata-analytics-react-native')){
//       exclude group: 'com.facebook.react', module: 'react-native'
//     }
    implementation (project(':react-native-signature-capture')){
      exclude group: 'com.facebook.react', module: 'react-native'
    }

    implementation (project(':react-native-secure-key-store')){
      exclude group: 'com.facebook.react', module: 'react-native'
    }

    implementation (project(':react-native-webview')) {
      exclude group: 'com.facebook.react', module: 'react-native'
    }
//     implementation (project(':@react-native-community_datetimepicker')){
//       exclude group: 'com.facebook.react', module: 'react-native'
//     }
//     implementation (project(':@react-native-community_cameraroll')){
//       exclude group: 'com.facebook.react', module: 'react-native'
//     }
    implementation (project(':react-native-image-resizer')){
      exclude group: 'com.facebook.react', module: 'react-native'
    }

//     implementation (project(':sensorsdata-analytics-react-native')){
//       exclude group: 'com.facebook.react', module: 'react-native'
//     }

    implementation (project(':react-native-share')){
      exclude group: 'com.facebook.react', module: 'react-native'
    }
    implementation (project(':react-native-picker')){
      exclude group: 'com.facebook.react', module: 'react-native'
    }
    implementation (project(':react-native-sqlite-storage')){
      exclude group: 'com.facebook.react', module: 'react-native'
    }
    implementation (project(':react-native-video')){
      exclude group: 'com.facebook.react', module: 'react-native'
    }
    implementation (project(':react-native-view-shot')){
      exclude group: 'com.facebook.react', module: 'react-native'
    }
    implementation (project(':react-native-image-crop-picker')){
        exclude group: 'com.facebook.react', module: 'react-native'
    }
    implementation (project(':react-native-pinch')){
      exclude group: 'com.facebook.react', module: 'react-native'
    }
    implementation (project(':react-native-image-crop-picker')){
        exclude group: 'com.facebook.react', module: 'react-native'
    }
    implementation (project(':react-native-image-picker')){
      exclude group: 'com.facebook.react', module: 'react-native'
    }
    /*implementation project(':react-native-splashscreen')*/
    implementation (project(':react-native-camera')){
      exclude group: 'com.facebook.react', module: 'react-native'
    }
    implementation (project(':react-native-file-opener')){
      exclude group: 'com.facebook.react', module: 'react-native'
    }
    implementation (project(':react-native-fs')){
      exclude group: 'com.facebook.react', module: 'react-native'
    }
    implementation (project(':react-native-orientation')){
      exclude group: 'com.facebook.react', module: 'react-native'
    }
    implementation (project(':react-native-detect-new-photo')){
      exclude group: 'com.facebook.react', module: 'react-native'
    }
//     implementation (project(':rn-camera-roll')){
//       exclude group: 'com.facebook.react', module: 'react-native'
//     }
    implementation (project(':react-native-device-info')){
      exclude group: 'com.facebook.react', module: 'react-native'
    }
    implementation (project(':react-native-localization')){
      exclude group: 'com.facebook.react', module: 'react-native'
    }
    implementation (project(':react-native-permissions')){
      exclude group: 'com.facebook.react', module: 'react-native'
    }
    implementation (project(':react-native-svg')){
      exclude group: 'com.facebook.react', module: 'react-native'
    }
    implementation (project(':rn-splash-screen')){
      exclude group: 'com.facebook.react', module: 'react-native'
    }
    implementation (project(':react-native-fetch-blob')){
      exclude group: 'com.facebook.react', module: 'react-native'
    }
    implementation (project(':react-native-cardview')){
      exclude group: 'com.facebook.react', module: 'react-native'
    }
    implementation (project(':react-native-linear-gradient')){
      exclude group: 'com.facebook.react', module: 'react-native'
    }
    implementation "com.facebook.soloader:soloader:0.8.2"
    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }
}

configurations.all {
    resolutionStrategy {
        force "com.facebook.soloader:soloader:0.8.2"
//        force "androidx.core:core:1.1.0"
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
  from configurations.compile
  into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
